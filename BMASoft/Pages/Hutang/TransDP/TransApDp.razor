@page "/TransApDp"
@inject NavigationManager navigationmanager
@inject BMASoft.Services.IPaymentApDpService service
@inject BMASoft.Services.IPayableService serviceAP


<style>
    .e-edit-icon::before {
        content: '\ea9a';
    }

    .e-delete-icon::before {
        content: '\e94a';
    }

    .e-print-icon::before {
        content: '\e34b';
    }

    .e-search:before {
        content: '\e993';
    }
</style>


<div class="row">
    <div class="col-6">
        <h1>Transaksi Bayar Uang Muka</h1>
    </div>
    <div class="col-6">
        <SfButton @onclick="Tambah" CssClass="e-primary">Add</SfButton>
    </div>
</div>

@if (toDoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">

                <SfGrid SelectedRowIndex="2" Height="300" DataSource="@toDoList" AllowGrouping="true" AllowSorting="true" AllowPaging="true" Toolbar="@(new List<string>() { "Search" })">
                    <GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>
                    <GridPageSettings PageCount="5" PageSizes="true"></GridPageSettings>
                    <GridEvents RowSelected="RowSelecthandler" TValue="ApTransH"></GridEvents>

                    <GridColumns>
                        <GridColumn HeaderText="" Width="60">
                            <Template>
                                @{
                                    var trans2 = (context as ApTransH);

                                    <SfButton CssClass="e-small e-danger" IconCss="e-icons e-delete-icon" @onclick="(() => Hapus(trans2.ApTransHId))"></SfButton>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field=@nameof(ApTransH.Bukti) HeaderText="No Bukti" Width="70"></GridColumn>
                        <GridColumn Field=@nameof(ApTransH.Supplier) HeaderText="Kode" Width="50"></GridColumn>
                        <GridColumn Field=@nameof(ApTransH.NamaSup) HeaderText="Supplier" Width="100"></GridColumn>
                        <GridColumn Field=@nameof(ApTransH.KdBank) HeaderText="Bank" Width="40"></GridColumn>
                        <GridColumn Field=@nameof(ApTransH.Tanggal) HeaderText="Tanggal" Format="d" Type="ColumnType.Date" Width="60"></GridColumn>
                        <GridColumn Field=@nameof(ApTransH.Keterangan) HeaderText="Keterangan" Width="170"></GridColumn>
                        <GridColumn Field=@nameof(ApTransH.Jumlah) HeaderText="Pembayaran" Format="N2" Width="70"></GridColumn>


                    </GridColumns>
                </SfGrid>


            </div>

        </div>
    </div>

    <SfDialog @bind-Visible="@IsVisible" Width="400px" ShowCloseIcon="true" IsModal="true">
        <DialogTemplates>
            <Header>
                Delete Items
            </Header>
            <Content>
                Are you sure you want to permanently delete these items ?
            </Content>
        </DialogTemplates>

        <DialogButtons>
            <DialogButton OnClick="@OkkClick" Content="OK" IsPrimary="true" />
            <DialogButton OnClick="@CancelClick" Content="Cancel" />
        </DialogButtons>
    </SfDialog>

    <SfDialog @bind-Visible="@IsDialog" Width="400px" ShowCloseIcon="true" IsModal="true">
        <DialogTemplates>
            <Header>
                INFORMATION
            </Header>
            <Content>
                Piutang ini sudah ada pembayaran
            </Content>
        </DialogTemplates>
        <DialogEvents Closed="@DialogClose"></DialogEvents>
        <DialogButtons>
            <DialogButton IsPrimary="true" Content="OK" OnClick="@OnBtnClick" />
        </DialogButtons>
    </SfDialog>
}


@code {

    private int id { get; set; }

    private List<ApTransH> toDoList;
    private List<ApTransD> toDoDetail;
    //   private ApTransH rubah;

    public string[] GroupedColumns = new string[] { "Supplier" };
    public string SelectedDoc { get; set; }
    public int? RowIndex { get; set; } = 1;

    public void RowSelecthandler(RowSelectEventArgs<ApTransH> Args)
    {
        SelectedDoc = Args.Data.Bukti;
        RowIndex = Args.Data.ApTransHId;
    }

    private bool IsVisible { get; set; } = false;
    private bool IsDialog { get; set; } = false;

    private void DialogClose(Object args)
    {
        this.IsVisible = false;
    }

    private void OnBtnClick()
    {
        this.IsDialog = false;
    }

    protected override async Task OnInitializedAsync()
    {

        await LoadTransAr();

    }

    async Task LoadTransAr()
    {

        toDoList = await service.Get3TransH();

        toDoDetail = await service.GetTransD();
    }

    private void Tambah()
    {
        navigationmanager.NavigateTo("AddTransApDp");
    }




    private void Hapus(int xKdBank)
    {

        this.IsVisible = true;
        this.id = xKdBank;

    }




    private async void OkkClick()
    {

        var HapusStatus = await service.DelTransH(this.id);
        this.IsVisible = false;

        navigationmanager.NavigateTo("TransApDp", true);

    }

    private void CancelClick()
    {

        this.IsVisible = false;

        //    StateHasChanged();

        navigationmanager.NavigateTo("TransApDp", false);
        //    await LoadBank();
        //      await OnInitializedAsync();
    }


}
