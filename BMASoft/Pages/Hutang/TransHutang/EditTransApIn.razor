@page "/EditTransApIn/{id:int}"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationmanager
@inject BMASoft.Services.IPayableService service
@using Newtonsoft.Json

<style>
    .e-edit-icon::before {
        content: '\ea9a';
    }

    .e-delete-icon::before {
        content: '\e94a';
    }

    .e-add-icon::before {
        content: '\e7f9';
    }

    .e-save-icon::before {
        content: '\e735';
    }

    .form-message {
        padding: 0.5rem;
        font-weight: 700;
    }

    #toast_default .e-meeting::before {
        content: "\e705";
        font-size: 17px;
    }

    .bootstrap4 #toast_default .e-meeting::before {
        content: "\e763";
        font-size: 20px;
    }
</style>



<div class="container">
    <div class="master">
        <a href="/SetupIcMutasi">Back</a>

        <div class="row">
            <div class="col-7">
                <h2>Transaksi Hutang</h2>
            </div>

            <div class="col-5 float-right">
                <h2 style="color:blue">@Transh.Bukti</h2>
            </div>
        </div>

        <EditForm Model="@Transh" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class=" row float-md-right">
                <SfButton CssClass="e-primary" IconCss="e-icons e-save-icon" Type="submit">Simpan</SfButton>
            </div>

            <div class="form-group">
                <SfComboBox TValue="string" TItem="ApSuppl" DataSource="suppliers" Placeholder="Select Supplier" FloatLabelType="FloatLabelType.Auto" @bind-Value="@Transh.Supplier">
                    <DropDownListEvents TValue="string" ValueChange="OnChangeBank"></DropDownListEvents>
                    <ComboBoxFieldSettings Text="NamaLengkap" Value="Supplier"></ComboBoxFieldSettings>
                </SfComboBox>
                <ValidationMessage For="@(() => Transh.ApSupplId)" />
            </div>


            <div class="form-group">
                <SfDatePicker TValue="DateTime" @bind-Value="Transh.Tanggal" Placeholder="Tanggal" FloatLabelType="FloatLabelType.Auto" Format="dd-MMM-yy">
                </SfDatePicker>
                <ValidationMessage For="@(() => Transh.Tanggal)" />
            </div>
            <div class="form-group">
                <SfTextBox CssClass="e-outline" @bind-Value="@Transh.Keterangan" Multiline="true" Placeholder="Keterangan" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => Transh.Keterangan)" />
            </div>
        </EditForm>


        <div class="details">

            <table class="table table-responsive">
                <thead>
                    <tr>
                        <td>Source</td>
                        <td>Keterangan</td>
                        <td>Jumlah</td>
                        <td>&nbsp;</td>
                    </tr>
                </thead>
                <tbody>
                    @if (Transh.ApTransDs != null)
                    {
                        @foreach (var detail in Transh.ApTransDs)
                        {
                            <tr>
                                <td>@detail.DistCode</td>
                                <td>@detail.Keterangan</td>
                                <td>@detail.Jumlah.ToString("#,##0.##")</td>
                                <td>
                                    <SfButton CssClass="e-small e-success" IconCss="e-icons e-edit-icon" @onclick="(() => Rubah(detail))"></SfButton>
                                    <SfButton CssClass="e-small e-danger" IconCss="e-icons e-delete-icon" @onclick="(() => Hapus(detail))"></SfButton>
                                </td>
                            </tr>
                        }
                    }

                    <tr>
                        <td>
                            <SfButton CssClass="e-small e-link" IconCss="e-icons e-add-icon" @onclick="@OnAddLine">Add Line</SfButton>
                        </td>
                        <td></td>
                        <td></td>
                        <td> </td>

                    </tr>

                </tbody>
            </table>


        </div>
        <div class="float-md-right form-message">
            <span>Saldo   : @Transh.Jumlah.ToString("#,##0.##")</span>
        </div>
    </div>
</div>
<SfDialog @bind-Visible="@IsVisible" Width="500px" ShowCloseIcon="true" IsModal="true">
    <DialogTemplates>
        <Content>
            <div class="form-group">
                <SfComboBox TValue="string" TItem="ApDist" DataSource="srccode" Placeholder="Select Code" FloatLabelType="FloatLabelType.Auto" @bind-Value="@Transd.DistCode">
                    <ComboBoxFieldSettings Text="Description" Value="DistCode"></ComboBoxFieldSettings>
                </SfComboBox>

            </div>
            <div class="form-group">
                <SfTextBox CssClass="e-outline" @bind-Value="@Transd.Keterangan" Placeholder="Keterangan" FloatLabelType="FloatLabelType.Auto"></SfTextBox>

            </div>

            <div class="container">
                <div class="row">
                    <div class="form-group col-md-6">
                        <SfNumericTextBox CssClass="e-outline" @bind-Value="@Transd.Jumlah" Placeholder="Jumlah" FloatLabelType="FloatLabelType.Auto"></SfNumericTextBox>

                    </div>
                </div>
            </div>

        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="@OkClick" Content="OK" IsPrimary="true" />
        <DialogButton OnClick="@CancelClick" Content="Cancel" />
    </DialogButtons>
</SfDialog>


<SfToast ID="toast_default" @ref="ToastObj" Title="Delete Record" Content="@ToastContent" TimeOut="5000" Icon="e-meeting">
    <ToastPosition X="@ToastPosition"></ToastPosition>
</SfToast>

@code {

    [Parameter] public int Id { get; set; }

    private ApTransHView Transh = new ApTransHView() { ApTransDs = new List<ApTransDView>() };
    private ApTransH TransAll = new ApTransH() { ApTransDs = new List<ApTransD>() };

    private List<ApSuppl> suppliers;
    private List<ApDist> srccode;
    private ApTransDView Transd = new ApTransDView();
    private ApTransDView TransK = new ApTransDView();
    //   private List<TransDView> TransDs = new List<TransDView>();
    private string enabled { get; set; }

    public int SupplierId { get; set; }

    private bool IsVisible { get; set; } = false;
    private bool IsKurs { get; set; } = false;
    private bool IsEdit { get; set; } = false;

    SfToast ToastObj;
    private string ToastPosition = "Right";
    private string ToastContent { get; set; } = " ";

    private void ShowOnClick()
    {
        this.ToastObj.Show();
    }

    protected override async Task OnInitializedAsync()
    {
        // Transh.Tanggal = DateTime.Now;

        Loadsuppliers();
        await LoadSrcCode();
        await LoadTrans();
    }

    void Loadsuppliers()
    {
        suppliers = service.GetSupplier();
    }

    async Task LoadSrcCode()
    {
        srccode = await service.GetDist();
    }

    async Task LoadTrans()
    {
        TransAll = await service.GetTrans(Id);
        Transh.ApTransHId = Id;
        Transh.Bukti = TransAll.Bukti;
        Transh.Tanggal = TransAll.Tanggal;
        Transh.ApSupplId = TransAll.ApSupplId;
        Transh.Supplier = TransAll.Supplier;
        SupplierId = TransAll.ApSupplId;
        Transh.Keterangan = TransAll.Keterangan;
        foreach (var item in TransAll.ApTransDs)
        {
            Transh.ApTransDs.Add(new ApTransDView
            {
                Jumlah = item.Jumlah,
                DistCode = item.DistCode,
                Keterangan = item.Keterangan
            });
        }
    }



    public void OnChangeBank(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        var itemData = JsonConvert.DeserializeObject<ApSuppl>(args.ItemData != null ? args.ItemData.ToString() : "");
        this.SupplierId = itemData.ApSupplId;

    }

    private void OkClick()
    {
        this.IsVisible = false;
        this.IsKurs = false;

        if (Transd.DistCode != null && !IsEdit)
        {
            Transh.ApTransDs.Add(new ApTransDView()
            {
                DistCode = Transd.DistCode,
                Keterangan = Transd.Keterangan,
                Jumlah = Transd.Jumlah
            });
        }



        Transd = new ApTransDView();
        //   StateHasChanged();
    }



    private void CancelClick()
    {
        this.IsVisible = false;
        this.IsKurs = false;
        //    Transd = new TransDView();
        //    TransK = new TransDView();
    }

    private void OnAddLine()
    {

        this.IsVisible = true;

        IsEdit = false;
        ShowOnClick();

    }
    private void OnEditLine()
    {
        this.IsVisible = true;
        this.IsKurs = false;

        IsEdit = true;


    }

    private void OnBtnSimpan()
    {
        this.IsVisible = true;
        this.IsKurs = false;

    }


    private void Rubah(ApTransDView transd)
    {
        //  Transd = new TransDView();
        Transd = transd;
        OnEditLine();
    }

    private void Hapus(ApTransDView transd)
    {
        Transh.ApTransDs.Remove(transd);
        ShowOnClick();
    }

    private async Task HandleValidSubmit()
    {
        Transh.ApSupplId = this.SupplierId;

        var newEdit = await service.EditTransH(Transh);

        navigationmanager.NavigateTo("TransApIn", false);
        //add = !add;
        //StateHasChanged();

    }
}
