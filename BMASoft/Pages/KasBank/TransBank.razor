@page "/TransBank"
@inject NavigationManager navigationmanager
@inject BMASoft.Services.IKasBankService service

<div class="row">
    <div>
        <h1>Transaksi Bank</h1>
    </div>

</div>
<div class="row">

    <SfButton @onclick="Tambah" CssClass="e-primary">Add</SfButton>

</div>
<br />
<br />

@if (toDoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid DataSource="@toDoList" AllowGrouping="true" AllowSorting="true" AllowPaging="true">
                    <GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>
                    <GridTemplates>
                        <DetailTemplate>
                            @{ 
                                var transbank = (context as CbTransH);
                            }
                            <div style="padding:25px">
                                <SfGrid DataSource="@toDoDetail" AllowPaging="true" Query="@(new Query().Where("CbTransHId", "equal", transbank.CbTransHId))">
                                    <GridPageSettings PageSize="6"></GridPageSettings>
                                    <GridColumns>
                                        <GridColumn Field=@nameof(CbTransD.CbTransDId) HeaderText="ID" TextAlign="TextAlign.Right" Width="50"> </GridColumn>
                                        <GridColumn Field=@nameof(CbTransD.SrcCode) HeaderText="Code" Width="50"></GridColumn>
                                        <GridColumn Field=@nameof(CbTransD.Keterangan) HeaderText="Keterangan" TextAlign="TextAlign.Right" Width="110" ></GridColumn>
                                        <GridColumn Field=@nameof(CbTransD.Jumlah) HeaderText="Jumlah" Width="90" Format="N2"></GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                        </DetailTemplate>
                    </GridTemplates>
                    <GridColumns>
                        <GridColumn HeaderText="" TextAlign="TextAlign.Left" Width="100">
                            <GridCommandColumns>
                                <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { Content = "Edit" })">
                                </GridCommandColumn>
                                <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { Content = "Delete" })">
                                </GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                        <GridColumn Field=@nameof(CbTransH.KodeBank) HeaderText="Bank" Width="50"></GridColumn>
                        <GridColumn Field=@nameof(CbTransH.DocNo) HeaderText="No Bukti" Width="70"></GridColumn>
                        <GridColumn Field=@nameof(CbTransH.Tanggal) HeaderText=" Tanggal" Format="d" Type="ColumnType.Date"  Width="60"></GridColumn>
                        <GridColumn Field=@nameof(CbTransH.Keterangan) HeaderText="Keterangan"  Width="170"></GridColumn>
                        <GridColumn Field=@nameof(CbTransH.Saldo) HeaderText="Saldo" Format="N2"  Width="100"></GridColumn>

                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
}


@code {

    private List<CbTransH> toDoList;
    private List<CbTransD> toDoDetail;

    public string[] GroupedColumns = new string[] { "KodeBank" };


    protected override async Task OnInitializedAsync()
    {

        await LoadBank();

    }

    async Task LoadBank()
    {

        toDoList = await service.GetTransH();
        toDoDetail = await service.GetTransD();
    }

    private void Tambah()
    {
        navigationmanager.NavigateTo("AddTransBank");
    }

    private async void Rubah(CbTransH xKdBank)
    {
        //Rubahbanks.bankId = xKdBank.CbBankId;
        //Rubahbanks.kdbank = xKdBank.KodeBank;
        //Rubahbanks.namabank = xKdBank.NmBank;
        //Rubahbanks.kurs = xKdBank.Kurs;
        //status = 2;
        //TblButton = !TblButton;
        await LoadBank();
        //StateHasChanged();

    }

    private async void Hapus(CbTransH xKdBank)
    {
        //Rubahbanks.bankId = xKdBank.CbBankId;
        //Rubahbanks.kdbank = xKdBank.KodeBank;
        //Rubahbanks.namabank = xKdBank.NmBank;
        //Rubahbanks.kurs = xKdBank.Kurs;
        //status = 3;
        //TblButton = !TblButton;
        await LoadBank();
        //StateHasChanged();
    }
}
