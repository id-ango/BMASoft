@page "/chart/pie"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inject BMASoft.Services.IKasBankService service


<div class="row">
    <div class="col-lg-8 control-section">
        <div class="control-section">
            <SfAccumulationChart Title="Saldo Kas/Bank" EnableAnimation="false">
                <AccumulationChartEvents Load="BeforeRender" />
                <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                <AccumulationChartSeriesCollection>
                    <AccumulationChartSeries DataSource="@dataSource" XName="NmBank" YName="Saldo" Name="Kas Bank" Radius="@OuterRadius" StartAngle="@StartAngle" EndAngle="@EndAngle"
                                             InnerRadius="0%" ExplodeIndex="@ExplodeIndex" Explode="true" ExplodeOffset="@ExplodeRadius">
                        <AccumulationDataLabelSettings Visible="true" Name="NmBank" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
                    </AccumulationChartSeries>
                </AccumulationChartSeriesCollection>
                
            </SfAccumulationChart>
        </div>
    </div>
    @*<div class="col-lg-4 property-section">
        <table title="Properties" style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Pie Angle:
                    </div>
                </td>
                <td style="width: 70%;">
                    <div class="">
                        <input type="range" @onchange="changeAngle" value="@value" min="0" max="360" style="width:90%" />
                    </div>
                </td>
                <td style="width: 30%">
                    <p style="font-weight: normal;"><span>@value</span></p>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Outer Radius:
                    </div>
                </td>
                <td style="width: 50%;">
                    <div data-role="rangeslider">
                        <input type="range" @onchange="ChangeOuterRadius" value="@radiusValue" min="0" max="80" style="width:90%" />
                    </div>
                </td>
                <td style="width: 30%">
                    <p style="font-weight: normal;"><span>@radiusValue</span></p>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Explode Radius:
                    </div>
                </td>
                <td style="width: 50%;">
                    <div data-role="rangeslider">
                        <input type="range" @onchange="ChangeExplodeRadius" value="@exploderadius" min="0" max="40" style="width:90%" />
                    </div>
                </td>
                <td style="width: 30%">
                    <p style="font-weight: normal;"><span>@exploderadius</span></p>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Explode Index:
                    </div>
                </td>
                <td style="width: 50%;">
                    <div data-role="rangeslider">
                        <input type="range" @onchange="ChangeExplodeIndex" value="@ExplodeIndex" min="0" max="6" style="width:90%" />
                    </div>
                </td>
                <td style="width: 30%">
                    <p style="font-weight: normal;"><span>@ExplodeIndex</span></p>
                </td>
            </tr>
        </table>
    </div>*@
</div>
@code{
    public int StartAngle = 0, value = 0, EndAngle = 360, radiusValue = 70, exploderadius = 10;
    public double ExplodeIndex = 1;
    public string OuterRadius = "70%", ExplodeRadius = "10%";
    private List<CbBank> dataSource = new List<CbBank>();

    private void changeAngle(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        value = Convert.ToInt32(args.Value);
        StartAngle = +Convert.ToInt32(args.Value);
        EndAngle = +Convert.ToInt32(args.Value);
    }
    private void ChangeOuterRadius(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        radiusValue = Convert.ToInt32(args.Value);
        OuterRadius = args.Value + "%";
    }
    private void ChangeExplodeRadius(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        exploderadius = Convert.ToInt32(args.Value);
        ExplodeRadius = args.Value + "%";
    }
    private void ChangeExplodeIndex(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        ExplodeIndex = Convert.ToInt32(args.Value);
    }

    protected override async Task OnInitializedAsync()
    {

        await LoadBank();

    }

    async Task LoadBank()
    {

        dataSource = await service.GetBank();


    }


    string CurrentUri;
    void BeforeRender(IAccLoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = AccumulationTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = AccumulationTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = AccumulationTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = AccumulationTheme.HighContrast;
        }
        else
        {
            Args.Theme = AccumulationTheme.Bootstrap4;
        }
    }
}