@page "/SetupSrcCode"
@using BMASoft.Data.Models
@using System.ComponentModel.DataAnnotations
@inject BMASoft.Services.IKasBankService service

<style>
    .e-edit-icon::before {
        content: '\ea9a';
    }

    .e-delete-icon::before {
        content: '\e94a';
    }
</style>


@if(true)
{
<div class="container">
    <div class="row">
        <div class="col-md-6">

            <h1>Setup Source Code</h1>
            <SfButton @onclick="Tambah" CssClass="e-primary">Add</SfButton>

            <br />
            <br />
        </div>
        <div class="col-md-6">

            <CascadingValue Name="TambahBank" Value="banks">
                <CascadingValue Name="EditBank" Value="Rubahbanks">
                    <FieldSrcCode cekStatus="status" tombol="TblButton" Simpan="simpan"></FieldSrcCode>
                </CascadingValue>
            </CascadingValue>
        </div>
    </div>
</div>

    <div class="col-md-12">
        @if (toDoList == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {

            <SfGrid DataSource="@toDoList" AllowGrouping="true" AllowSorting="true" Width="auto" Height="310" Toolbar="@(new List<string>() {"Print", "Search" })">

                <GridColumns>

                    <GridColumn HeaderText="" Width="80">
                        <Template>
                            @{
                                var trans2 = (context as CbSrcCode);

                                <SfButton CssClass="e-small e-success" IconCss="e-icons e-edit-icon" @onclick="(() => Rubah(trans2))"></SfButton>
                                <SfButton CssClass="e-small e-danger" IconCss="e-icons e-delete-icon" @onclick="(() => Hapus(trans2))"></SfButton>

                            }

                        </Template>

                    </GridColumn>
                    <GridColumn Field=@nameof(CbSrcCode.SrcCode) HeaderText="Kode" Width="60"></GridColumn>
                    <GridColumn Field=@nameof(CbSrcCode.NamaSrc) HeaderText="Nama" Width="170"></GridColumn>
                    <GridColumn Field=@nameof(CbSrcCode.GlAcct) HeaderText=" GL Akun" Width="70"></GridColumn>
                    <GridColumn Field=@nameof(CbSrcCode.Grp) HeaderText="Group" Width="70"></GridColumn>

                </GridColumns>
            </SfGrid>
        }
    </div>
                                }


@code {

    private List<CbSrcCode> toDoList;
    private bool TblButton { get; set; } = true;


    private int status { get; set; }

    SrcCodeView banks = new SrcCodeView();
    SrcCodeView Rubahbanks = new SrcCodeView();


    protected override async Task OnInitializedAsync()
    {

        await LoadBank();

    }

    async Task LoadBank()
    {
        toDoList = await service.GetSrcCode();
    }

    private void simpan(bool jadisimpan)
    {
        TblButton = jadisimpan;
        Tambah();

    }

    private async void Tambah()
    {
        status = 1;
        TblButton = !TblButton;
        await LoadBank();
        StateHasChanged();
    }
    private async void Rubah(CbSrcCode xKdBank)
    {
        Rubahbanks.SrcCodeId = xKdBank.CbSrcCodeId;
        Rubahbanks.SrcCode = xKdBank.SrcCode;
        Rubahbanks.NamaSrc = xKdBank.NamaSrc;

        status = 2;
        TblButton = !TblButton;
        await LoadBank();
        StateHasChanged();

    }

    private async void Hapus(CbSrcCode xKdBank)
    {
        Rubahbanks.SrcCodeId = xKdBank.CbSrcCodeId;
        Rubahbanks.SrcCode = xKdBank.SrcCode;
        Rubahbanks.NamaSrc = xKdBank.NamaSrc;

        status = 3;
        TblButton = !TblButton;
        await LoadBank();
        StateHasChanged();
    }


}