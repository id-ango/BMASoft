@page "/AddAntarBank"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationmanager
@inject BMASoft.Services.IKasBankService service
@using Newtonsoft.Json

@inject Microsoft.JSInterop.IJSRuntime JS
@using BMASoft.Printing
@using System.IO

<style>
    .e-edit-icon::before {
        content: '\ea9a';
    }

    .e-delete-icon::before {
        content: '\e94a';
    }

    .e-add-icon::before {
        content: '\e7f9';
    }

    .e-save-icon::before {
        content: '\e735';
    }

    .form-message {
        padding: 0.5rem;
        font-weight: 700;
    }

    #toast_default .e-meeting::before {
        content: "\e705";
        font-size: 17px;
    }

    .bootstrap4 #toast_default .e-meeting::before {
        content: "\e763";
        font-size: 20px;
    }
</style>



<div class="container">
    <div class="master">
        <h2>Add Transfer Antar Kas/Bank</h2>

        <EditForm Model="@Transh" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="float-md-right">
                <SfButton CssClass="e-primary" IconCss="e-icons e-save-icon" Type="submit">Simpan</SfButton>
            </div>

            <label>@kurs1</label> <br />
            <div class="form-group">
                <SfComboBox TValue="string" TItem="CbBank" DataSource="banks" Placeholder="From Bank" FloatLabelType="FloatLabelType.Auto" @bind-Value="@Transh.KodeBank1">
                    <DropDownListEvents TValue="string" ValueChange="OnChangeBank1"></DropDownListEvents>
                    <ComboBoxFieldSettings Text="NmBank" Value="KodeBank"></ComboBoxFieldSettings>
                </SfComboBox>
                <ValidationMessage For="@(() => Transh.KodeBank1)" />
            </div>

            <div class="form-group">
                <SfComboBox TValue="string" TItem="CbBank" DataSource="banks" Placeholder="To Bank" FloatLabelType="FloatLabelType.Auto" @bind-Value="@Transh.KodeBank2">
                    <DropDownListEvents TValue="string" ValueChange="OnChangeBank2"></DropDownListEvents>
                    <ComboBoxFieldSettings Text="NmBank" Value="KodeBank"></ComboBoxFieldSettings>
                </SfComboBox>
                <ValidationMessage For="@(() => Transh.KodeBank2)" />
            </div>

            <div class="form-group">
                <SfDatePicker TValue="DateTime" @bind-Value="Transh.Tanggal" Placeholder="Tanggal" FloatLabelType="FloatLabelType.Auto" Format="dd-MMM-yy">
                </SfDatePicker>
                <ValidationMessage For="@(() => Transh.Tanggal)" />
            </div>
            <div class="form-group">
                <SfTextBox CssClass="e-outline" @bind-Value="@Transh.Keterangan" Multiline="true" Placeholder="Keterangan" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                <ValidationMessage For="@(() => Transh.Keterangan)" />
            </div>

            <div class="form-group">
                <SfNumericTextBox CssClass="e-outline" @bind-Value="@Transh.KValue" @onfocusout="KursUbah" Placeholder="Kurs" FloatLabelType="FloatLabelType.Auto"></SfNumericTextBox>
            </div>
            
            <div class="form-group">
                <SfNumericTextBox CssClass="e-outline" @bind-Value="@Transh.Saldo" @onfocusout="BayarUbah" Placeholder="Payment" FloatLabelType="FloatLabelType.Auto"></SfNumericTextBox>
            </div>

        </EditForm>
       
        <div class="float-md-right form-message">
            <span>Saldo   : @Transh.Saldo.ToString("#,##0.##")</span>
        </div>
        <div class="float-md-right form-message">
            <span> Balance : @Transh.KSaldo.ToString("#,##0.##")</span>
        </div>
    </div>
</div>


<SfToast ID="toast_default" @ref="ToastObj" Title="Delete Record" Content="@ToastContent" TimeOut="5000" Icon="e-meeting">
    <ToastPosition X="@ToastPosition"></ToastPosition>
</SfToast>

@code {

    private TransferView Transh = new TransferView() ;

    private List<CbBank> banks;


    //   private List<TransDView> TransDs = new List<TransDView>();
    private string enabled { get; set; }

    public string kurs1 { get; set; } = "";
    public string kurs2 { get; set; } = "";

    private bool IsVisible { get; set; } = false;
    private bool IsKurs { get; set; } = false;
    private bool IsEdit { get; set; } = false;

    SfToast ToastObj;
    private string ToastPosition = "Right";
    private string ToastContent { get; set; } = " ";

    private void ShowOnClick()
    {
        this.ToastObj.Show();
    }

    protected override async Task OnInitializedAsync()
    {
        Transh.Tanggal = DateTime.Now;

        await LoadBank();
        
    }

    async Task LoadBank()
    {

        banks = await service.GetBank();

    }

    

    public void OnChangeBank1(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        var itemData = JsonConvert.DeserializeObject<CbBank>(args.ItemData != null ? args.ItemData.ToString() : "");
        this.kurs1 = itemData?.Kurs;

    }

    public void OnChangeBank2(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        var itemData = JsonConvert.DeserializeObject<CbBank>(args.ItemData != null ? args.ItemData.ToString() : "");
        this.kurs2 = itemData?.Kurs;

    }

   

    private void OkkClick()
    {
        this.IsVisible = false;
        this.IsKurs = false;
        if (TransK.SrcCode != null && !IsEdit)
        {
            Transh.TransDs.Add(new TransDView()
            {
                SrcCode = TransK.SrcCode,
                Keterangan = TransK.Keterangan,
                Terima = TransK.Terima,
                Bayar = TransK.Bayar,
                KTerima = TransK.KTerima,
                KBayar = TransK.KBayar,
                KValue = TransK.KValue,
                Kurs = kurs
            });
        }

        TransK = new TransDView();
    }

    private void CancelClick()
    {
        this.IsVisible = false;
        this.IsKurs = false;
        Transd = new TransDView();
        TransK = new TransDView();
    }

    private void OnAddLine()
    {
        if (this.kurs != null && this.kurs.Length != 0)
        {
            this.IsVisible = true;
            this.IsKurs = false;
        }
        else
        {
            this.IsVisible = false;
            this.IsKurs = true;
        }
        IsEdit = false;
        ShowOnClick();
    }
    private void OnEditLine()
    {
        if (this.kurs != null && this.kurs.Length != 0)
        {
            this.IsVisible = true;
            this.IsKurs = false;
        }
        else
        {
            this.IsVisible = false;
            this.IsKurs = true;
        }
        IsEdit = true;

    }

    private void OnBtnSimpan()
    {
        if (this.kurs != null)
        {
            this.IsVisible = true;
            this.IsKurs = false;
        }
        else
        {
            this.IsVisible = false;
            this.IsKurs = true;
        }


    }

    private void TerimaUbah()
    {

        Transd.Terima = Transd.KValue * Transd.KTerima;
        if (Transd.Terima != 0)
        {
            Transd.KBayar = 0;
            Transd.Bayar = Transd.KValue * Transd.KBayar;
        }
    }


    private void BayarUbah()
    {
        Transd.Bayar = Transd.KValue * Transd.KBayar;
        if (Transd.Bayar != 0)
        {

            Transd.KTerima = 0;
            Transd.Terima = Transd.KValue * Transd.KTerima;

        }

    }

    private void KTerimaUbah()
    {


        if (TransK.Terima != 0)
        {
            TransK.KBayar = 0;
            TransK.Bayar = 0;
        }
    }


    private void KBayarUbah()
    {

        if (TransK.Bayar != 0)
        {

            TransK.KTerima = 0;
            TransK.Terima = 0;

        }

    }

    private void KursUbah()
    {
        Transd.Terima = Transd.KValue * Transd.KTerima;
        Transd.Bayar = Transd.KValue * Transd.KBayar;
    }

    private void Rubah(TransDView transd)
    {
        Transd = new TransDView();
        Transd = transd;

        TransK = new TransDView();
        TransK = transd;

        OnEditLine();



    }

    private void Hapus(TransDView transd)
    {

        Transh.TransDs.Remove(transd);
        ShowOnClick();



    }

    private async Task HandleValidSubmit()
    {
        Transh.Kurs = kurs;
        Transh.KodeDoc = Transh.KodeBank;
        var newEdit = await service.AddTransH(Transh);
        if (newEdit != null)
        {
            //  await ExportToPdf(Transh);
            // GeneratePDF(newEdit);
            var id = newEdit.CbTransHId.ToString().Trim();
            navigationmanager.NavigateTo($"printbuktikasbank/{id}");
            //  await ExportToPdf(Transh);
            //  GeneratePDF(newEdit);
            //string Url = "/printbuktikasbank/"+id;
            //await JS.InvokeAsync<object>("open", Url, "_blank");
        }

        //  navigationmanager.NavigateTo("TransBank", false);
        //add = !add;
        //StateHasChanged();

    }

    public async void GeneratePDF(CbTransH trans)
    {
        BuktiKasBank service = new BuktiKasBank();
        MemoryStream documentStream = service.CreatePdfDocument(trans);
        await JS.SaveAs("BuktiKasBank.pdf", documentStream.ToArray());
    }

    //protected async Task ExportToPdf(TranshView trans)
    //{
    //    using (MemoryStream excelStream = service.PdfBuktiBank(trans))
    //    {
    //        await JS.SaveAs("Sample.pdf", excelStream.ToArray());
    //    }
    //}
}
