@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationmanager
@inject BMASoft.Services.IKasBankService service


@if (pilihmana())
{
    <EditForm Model="@banks" OnValidSubmit="HandleValidSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="kodebank">Kode Bank</label> <br />
        <InputText id="kodebank" @bind-Value="banks.SrcCode" style="text-transform:uppercase" disabled=@((cekStatus==3 || cekStatus==2) ? "disabled":null) /> <br />
        <label for="nmbank">Nama Bank</label> <br />
        <InputText id="nmbank" @bind-Value="banks.NamaSrc" disabled=@(cekStatus==3 ? "disabled":null) /> <br />
        <label for="kurs">GL Akun</label> <br />
        @*<InputSelect id="kurs" style="text-transform:uppercase" @bind-Value=banks.GlAcct disabled=@(cekStatus==3 ? "disabled":null)>
                <option value=""></option>
                <option value="USD">USD</option>
                <option value="EUR">EURO</option>
            </InputSelect> <br /><br />*@
        <SfButton Type="Submit" Disabled="addButton" Content="Save" CssClass="e-primary" />
        <SfButton Type="Submit" Disabled="editButton" Content="Update" CssClass="e-success" />
        <SfButton Type="Submit" Disabled="deleteButton" Content="Delete" CssClass="e-danger" />
    </EditForm>

}
<SfToast ID="toast_default" @ref="ToastObj" Title="INFORMATION" Content="@ToastContent" TimeOut="5000" Icon="e-meeting">
    <ToastPosition X="@ToastPosition"></ToastPosition>
</SfToast>
<br />

@code {

    [Parameter]
    public int cekStatus { get; set; }

    [Parameter]
    public bool tombol { get; set; }

    [Parameter]
    public EventCallback<bool> Simpan { get; set; }

    [CascadingParameter(Name = "TambahBank")]
    public SrcCodeView banks { get; set; }

    [CascadingParameter(Name = "EditBank")]
    public SrcCodeView Editbanks { get; set; }

    private int selectedId = -1;

    private bool addButton { get; set; }
    private bool editButton { get; set; }
    private bool deleteButton { get; set; }

    SfToast ToastObj;
    private string ToastPosition = "Right";
    private string ToastContent { get; set; } = " ";

    private bool pilihmana()
    {
        switch (cekStatus)
        {
            case 1:
                addButton = false;
                editButton = deleteButton = true;
                break;
            case 2:
                editButton = false;
                addButton = deleteButton = true;
                if (selectedId == -1)
                {
                    banks.SrcCode = Editbanks.SrcCode;
                    banks.NamaSrc = Editbanks.NamaSrc;
                    banks.GlAcct = Editbanks.GlAcct;
                    banks.Grp = Editbanks.Grp;
                    banks.SrcCodeId = Editbanks.SrcCodeId;
                    selectedId = Editbanks.SrcCodeId;
                }
                if (tombol == true)
                    selectedId = -1;

                break;
            case 3:
                deleteButton = false;
                editButton = addButton = true;

                banks.SrcCode = Editbanks.SrcCode;
                banks.NamaSrc = Editbanks.NamaSrc;
                banks.GlAcct = Editbanks.GlAcct;
                banks.Grp = Editbanks.Grp;
                banks.SrcCodeId = Editbanks.SrcCodeId;
                selectedId = Editbanks.SrcCodeId;

                break;

        }

        return !tombol;
    }



    // bank banks = new bank();

    private async Task HandleValidSubmit()
    {
        switch (cekStatus)
        {
            case 1:
                var newAdd = await service.AddSrcCode(banks);
                if (!newAdd)
                {
                    ToastContent = "Kode Source ini Sudah Ada";
                    await Task.Delay(100);
                    await this.ToastObj.Show();
                }
                break;
            case 2:
                var newEdit = await service.EditSrcCode(banks);
                break;
            case 3:
                var newDel = await service.DelSrcCode(banks);
                if (newDel)
                {
                    ToastContent = "Kode Source sudah dihapus";
                    await Task.Delay(100);
                    await this.ToastObj.Show();
                }
                break;
        };


        banks.SrcCode = "";
        banks.NamaSrc = "";
        banks.GlAcct = "";
        refreshTambah();
        navigationmanager.NavigateTo("SetupSrcCode", false);
        //add = !add;
        //StateHasChanged();

    }
    private void refreshTambah()
    {
        tombol = !tombol;
        Simpan.InvokeAsync(tombol);

    }

}
