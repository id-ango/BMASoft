@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationmanager
@inject BMASoft.Services.IReceivableService service


@if (pilihmana())
{
    <EditForm Model="@accts" OnValidSubmit="HandleValidSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="kodebank">Distribution Code</label> <br />
        <InputText id="kodebank" @bind-Value="accts.DistCode" style="text-transform:uppercase" disabled=@((cekStatus==3 || cekStatus==2) ? "disabled":null) /> <br />
        <label for="nmbank">Keterangan</label> <br />
        <InputText id="nmbank" @bind-Value="accts.Description" disabled=@(cekStatus==3 ? "disabled":null) /> <br />
        <label for="akun1">Akun 1</label> <br />
        <InputText id="akun1" @bind-Value="accts.Dist1" /> <br /><br/>

        <SfButton Type="Submit" Disabled="addButton" Content="Save" CssClass="e-primary" />
        <SfButton Type="Submit" Disabled="editButton" Content="Update" CssClass="e-success" />
        <SfButton Type="Submit" Disabled="deleteButton" Content="Delete" CssClass="e-danger" />
    </EditForm>

}
<SfToast ID="toast_default" @ref="ToastObj" Title="INFORMATION" Content="@ToastContent" TimeOut="5000" Icon="e-meeting">
    <ToastPosition X="@ToastPosition"></ToastPosition>
</SfToast>
<br />

@code {

    [Parameter]
    public int cekStatus { get; set; }

    [Parameter]
    public bool tombol { get; set; }

    [Parameter]
    public EventCallback<bool> Simpan { get; set; }

    [CascadingParameter(Name = "TambahAcct")]
    public ArDistView accts { get; set; }

    [CascadingParameter(Name = "EditAcct")]
    public ArDistView Editaccts { get; set; }

    private int selectedId = -1;

    private bool addButton { get; set; }
    private bool editButton { get; set; }
    private bool deleteButton { get; set; }

    SfToast ToastObj;
    private string ToastPosition = "Right";
    private string ToastContent { get; set; } = " ";

    private bool pilihmana()
    {
        switch (cekStatus)
        {
            case 1:
                addButton = false;
                editButton = deleteButton = true;
                break;
            case 2:
                editButton = false;
                addButton = deleteButton = true;
                if (selectedId == -1)
                {
                    accts.DistCode = Editaccts.DistCode;
                    accts.Description = Editaccts.Description;
                    accts.Dist1 = Editaccts.Dist1;
                    accts.ArDistId = Editaccts.ArDistId;
                    selectedId = Editaccts.ArDistId;
                }
                if (tombol == true)
                    selectedId = -1;

                break;
            case 3:
                deleteButton = false;
                editButton = addButton = true;

                accts.DistCode = Editaccts.DistCode;
                accts.Description = Editaccts.Description;
                accts.Dist1 = Editaccts.Dist1;
                accts.ArDistId = Editaccts.ArDistId;
                selectedId = Editaccts.ArDistId;

                break;

        }

        return !tombol;
    }



    // bank banks = new bank();

    private async Task HandleValidSubmit()
    {
        switch (cekStatus)
        {
            case 1:
                var newAdd = await service.AddDist(accts);
                if (!newAdd)
                {
                    ToastContent = "Kode Distribution ini Sudah Ada";
                    await Task.Delay(100);
                    await this.ToastObj.Show();
                }
                break;
            case 2:
                var newEdit = await service.EditDist(accts);
                break;
            case 3:
                var newDel = await service.DelDist(accts);
                if (newDel)
                {
                    ToastContent = "Kode Distribution sudah dihapus";
                    await Task.Delay(100);
                    await this.ToastObj.Show();
                }
                break;
        };


        accts.DistCode = "";
        accts.Description = "";
        accts.Dist1 = "";
        refreshTambah();
        navigationmanager.NavigateTo("SetupArDist", false);
        //add = !add;
        //StateHasChanged();

    }
    private void refreshTambah()
    {
        tombol = !tombol;
        Simpan.InvokeAsync(tombol);

    }

}
