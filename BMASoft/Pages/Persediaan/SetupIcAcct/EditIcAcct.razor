@page "/EditIcAcct/{Id:int}"
@using BMASoft.Data.Models
@using System.ComponentModel.DataAnnotations
@inject BMASoft.Services.IInventoryService service
@inject BMASoft.Services.ILedgerService serviceGl
@inject NavigationManager navigationmanager
@using Newtonsoft.Json

<div class="container">
    <div class="master">
        <a href="/SetupIcAcct">Back</a>

        <h2>Edit Akun Set</h2>

        <EditForm Model="@supplier" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <br />
            <div class="form-group">
                <SfTextBox CssClass="e-outline" @bind-Value="@supplier.AcctSet" Placeholder="AkunSet" FloatLabelType="FloatLabelType.Auto" disabled="disabled"></SfTextBox>

            </div>
            <div class="form-group">
                <SfTextBox CssClass="e-outline" @bind-Value="@supplier.Description" Placeholder="Keterangan" FloatLabelType="FloatLabelType.Auto"></SfTextBox>

            </div>
            <div class="form-group">
                <SfComboBox TValue="string" TItem="GlAccount" DataSource="GlAccounts" Placeholder="Inventory" FloatLabelType="FloatLabelType.Auto" @bind-Value="@supplier.Acct1">
                    <DropDownListEvents TValue="string" ValueChange="OnChangeAkun"></DropDownListEvents>
                    <ComboBoxFieldSettings Text="NamaLengkap" Value="GlAcct"></ComboBoxFieldSettings>
                </SfComboBox>
                <ValidationMessage For="@(() => supplier.Acct1)" />
            </div>

            <div class="form-group">
                <SfComboBox TValue="string" TItem="GlAccount" DataSource="GlAccounts" Placeholder="Receipt" FloatLabelType="FloatLabelType.Auto" @bind-Value="@supplier.Acct2">
                    <DropDownListEvents TValue="string"></DropDownListEvents>
                    <ComboBoxFieldSettings Text="NamaLengkap" Value="GlAcct"></ComboBoxFieldSettings>
                </SfComboBox>
                <ValidationMessage For="@(() => supplier.Acct2)" />
            </div>
            <div class="form-group">
                <SfComboBox TValue="string" TItem="GlAccount" DataSource="GlAccounts" Placeholder="TAdjustment" FloatLabelType="FloatLabelType.Auto" @bind-Value="@supplier.Acct3">
                    <DropDownListEvents TValue="string"></DropDownListEvents>
                    <ComboBoxFieldSettings Text="NamaLengkap" Value="GlAcct"></ComboBoxFieldSettings>
                </SfComboBox>
                <ValidationMessage For="@(() => supplier.Acct3)" />
            </div>

           

            <div class="float-md-right">
                <SfButton CssClass="e-primary" IconCss="e-icons e-save-icon" Type="submit">Simpan</SfButton>
            </div>


        </EditForm>

    </div>
</div>

@code{

    [Parameter] public int Id { get; set; }

    IcAcctView supplier = new IcAcctView();
    IcAcct Supplier = new IcAcct();
    private List<GlAccount> GlAccounts;

    public int GlAccountId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Transh.Tanggal = DateTime.Now;

        LoadApAkunSet();
        await LoadGlAccounts();
    }

    void LoadApAkunSet()
    {
        Supplier = service.GetIcAcctId(Id);
        supplier.IcAcctId = Supplier.IcAcctId;
        supplier.AcctSet = Supplier.AcctSet;
        supplier.Description = Supplier.Description;
        supplier.Acct1 = Supplier.Acct1;
        supplier.Acct2 = Supplier.Acct2;
        supplier.Acct3 = Supplier.Acct3;
    }

    private async Task HandleValidSubmit()
    {

        var newEdit = await service.EditIcAcct(supplier);
        if (newEdit)
        {
            //   await ExportToPdf(Transh);
        }

        navigationmanager.NavigateTo("SetupIcAcct", false);

        //add = !add;
        //StateHasChanged();

    }

    public void OnChangeAkun(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        var itemData = JsonConvert.DeserializeObject<GlAccount>(args.ItemData != null ? args.ItemData.ToString() : "");
        this.GlAccountId = itemData.GlAccountId;

    }

    async Task LoadGlAccounts()
    {
        GlAccounts = await serviceGl.GetGlAccount();
    }
}